// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.

package discovery

import (
	"context"
	types "github.com/sourcegraph/sourcegraph/internal/types"
	"sync"
)

// MockIndexableRepoStore is a mock implementation of the IndexableRepoStore
// interface (from the package
// github.com/sourcegraph/sourcegraph/enterprise/internal/insights/discovery)
// used for unit testing.
type MockIndexableRepoStore struct {
	// ListFunc is an instance of a mock function object controlling the
	// behavior of the method List.
	ListFunc *IndexableRepoStoreListFunc
}

// NewMockIndexableRepoStore creates a new mock of the IndexableRepoStore
// interface. All methods return zero values for all results, unless
// overwritten.
func NewMockIndexableRepoStore() *MockIndexableRepoStore {
	return &MockIndexableRepoStore{
		ListFunc: &IndexableRepoStoreListFunc{
			defaultHook: func(context.Context) ([]*types.RepoName, error) {
				return nil, nil
			},
		},
	}
}

// NewMockIndexableRepoStoreFrom creates a new mock of the
// MockIndexableRepoStore interface. All methods delegate to the given
// implementation, unless overwritten.
func NewMockIndexableRepoStoreFrom(i IndexableRepoStore) *MockIndexableRepoStore {
	return &MockIndexableRepoStore{
		ListFunc: &IndexableRepoStoreListFunc{
			defaultHook: i.List,
		},
	}
}

// IndexableRepoStoreListFunc describes the behavior when the List method of
// the parent MockIndexableRepoStore instance is invoked.
type IndexableRepoStoreListFunc struct {
	defaultHook func(context.Context) ([]*types.RepoName, error)
	hooks       []func(context.Context) ([]*types.RepoName, error)
	history     []IndexableRepoStoreListFuncCall
	mutex       sync.Mutex
}

// List delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockIndexableRepoStore) List(v0 context.Context) ([]*types.RepoName, error) {
	r0, r1 := m.ListFunc.nextHook()(v0)
	m.ListFunc.appendCall(IndexableRepoStoreListFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the List method of the
// parent MockIndexableRepoStore instance is invoked and the hook queue is
// empty.
func (f *IndexableRepoStoreListFunc) SetDefaultHook(hook func(context.Context) ([]*types.RepoName, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// List method of the parent MockIndexableRepoStore instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *IndexableRepoStoreListFunc) PushHook(hook func(context.Context) ([]*types.RepoName, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *IndexableRepoStoreListFunc) SetDefaultReturn(r0 []*types.RepoName, r1 error) {
	f.SetDefaultHook(func(context.Context) ([]*types.RepoName, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *IndexableRepoStoreListFunc) PushReturn(r0 []*types.RepoName, r1 error) {
	f.PushHook(func(context.Context) ([]*types.RepoName, error) {
		return r0, r1
	})
}

func (f *IndexableRepoStoreListFunc) nextHook() func(context.Context) ([]*types.RepoName, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *IndexableRepoStoreListFunc) appendCall(r0 IndexableRepoStoreListFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of IndexableRepoStoreListFuncCall objects
// describing the invocations of this function.
func (f *IndexableRepoStoreListFunc) History() []IndexableRepoStoreListFuncCall {
	f.mutex.Lock()
	history := make([]IndexableRepoStoreListFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// IndexableRepoStoreListFuncCall is an object that describes an invocation
// of method List on an instance of MockIndexableRepoStore.
type IndexableRepoStoreListFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*types.RepoName
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c IndexableRepoStoreListFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c IndexableRepoStoreListFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
